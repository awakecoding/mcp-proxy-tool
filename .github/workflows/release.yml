name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (default: vYYYY.M.D for today)'
        required: false
        type: string
      dry-run:
        description: 'Dry run (do not create GitHub release, just print what would be released)'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create a draft release (for testing, not public)'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release Binaries
    uses: ./.github/workflows/ci.yml
    with:
      release_mode: true

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Get tag
      id: tag
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $inputTag = "${{ github.event.inputs.tag }}"
          if ([string]::IsNullOrWhiteSpace($inputTag)) {
            # Extract version from Cargo.toml
            $cargoToml = Get-Content "Cargo.toml"
            $versionLine = $cargoToml | Where-Object { $_ -match '^version = "(.+)"' }
            $version = $matches[1]
            $tag = "v$version"
          } else {
            $tag = $inputTag
          }
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } else {
          $tag = "${{ github.ref }}" -replace "refs/tags/", ""
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }


    - name: Create release archives
      shell: pwsh
      run: |
    - name: Create release archives
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path "release" -Force | Out-Null
        # Process each platform's artifacts
        $platforms = @(
          @{ name = "linux-x64"; archive = "zip" },
          @{ name = "linux-arm64"; archive = "zip" },
          @{ name = "windows-x64"; archive = "zip" },
          @{ name = "windows-arm64"; archive = "zip" },
          @{ name = "macos-x64"; archive = "zip" },
          @{ name = "macos-arm64"; archive = "zip" }
        )
        foreach ($platform in $platforms) {
          $IsPlatformWindows = $platform.name -like "*windows*"
          $artifactName = "mcp-proxy-tool-$($platform.name)"
          $artifactPath = if ($IsPlatformWindows) {
            "artifacts/$artifactName/mcp-proxy-tool.exe"
          } else {
            "artifacts/$artifactName/mcp-proxy-tool"
          }
          if (Test-Path $artifactPath) {
            Write-Host "Processing $($platform.name)..."
            # Create staging directory
            $stagingDir = "staging/$($platform.name)"
            New-Item -ItemType Directory -Path $stagingDir -Force | Out-Null
            # Always copy as 'mcp-proxy-tool' (with .exe for Windows)
            $binaryName = if ($IsPlatformWindows) { "mcp-proxy-tool.exe" } else { "mcp-proxy-tool" }
            # Remove any existing file with the target name
            if (Test-Path "$stagingDir/$binaryName") { Remove-Item "$stagingDir/$binaryName" -Force }
            Copy-Item $artifactPath "$stagingDir/$binaryName"
            # Ensure executable permissions on Unix platforms
            if (-not $IsPlatformWindows) {
              chmod +x "$stagingDir/$binaryName"
            }
            $archiveName = "mcp-proxy-tool-$($platform.name)"
            if ($IsPlatformWindows) {
              # Zip only the .exe at the root of the zip
              Push-Location $stagingDir
              7z a "../../release/$archiveName.zip" "$binaryName"
              Pop-Location
            } else {
              # Zip only the binary at the root of the zip
              Push-Location $stagingDir
              zip "../../release/$archiveName.zip" "$binaryName"
              Pop-Location
            }
            Write-Host "✓ Created release/$archiveName.zip (contains $binaryName)"
          } else {
            Write-Host "⚠ Artifact not found: $artifactPath"
          }
        }


    - name: Create GitHub release (all-in-one)
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Download all artifacts to a single directory
        New-Item -ItemType Directory -Path "release" -Force | Out-Null
        $artifacts = Get-ChildItem -Recurse -Path artifacts -Include *.zip
        foreach ($artifact in $artifacts) {
          Copy-Item $artifact.FullName release/
        }

        # Generate checksums
        Push-Location release
        $Files = Get-ChildItem -File
        $Files | ForEach-Object { Get-FileHash -Algorithm SHA256 $_.FullName } |
          ForEach-Object { "$($_.Hash)  $(Split-Path $_.Path -Leaf)" } |
          Out-File -FilePath "checksums.txt" -Encoding ASCII
        Pop-Location

        Write-Host "::group::checksums.txt"
        Get-Content release/checksums.txt | Write-Host
        Write-Host "::endgroup::"

        $assets = Get-ChildItem release -File | ForEach-Object { $_.FullName }
        $tag = "${{ steps.tag.outputs.tag }}"
        $repo = $env:GITHUB_REPOSITORY
        $dryRun = "${{ github.event.inputs.dry-run }}" -eq "true"
        $draft = "${{ github.event.inputs.draft }}" -eq "true"

        if ($dryRun) {
          Write-Host "[DRY RUN] Would create release with tag: $tag"
          Write-Host "[DRY RUN] Assets: $assets"
          Write-Host "[DRY RUN] Draft: $draft"
        } else {
          $draftFlag = if ($draft) { "--draft" } else { "" }
          & gh release create $tag --repo $repo --title $tag $draftFlag $assets
        }
