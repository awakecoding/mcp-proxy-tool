name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release Binaries
    uses: ./.github/workflows/ci.yml
    with:
      release_mode: true

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Get tag
      id: tag
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          "tag=${{ github.event.inputs.tag }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } else {
          $tag = "${{ github.ref }}" -replace "refs/tags/", ""
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }

    - name: Create release archives
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path "release" -Force | Out-Null
        
        # Process each platform's artifacts
        $platforms = @(
          @{ name = "linux-x64"; archive = "zip" },
          @{ name = "linux-arm64"; archive = "zip" },
          @{ name = "windows-x64"; archive = "zip" },
          @{ name = "windows-arm64"; archive = "zip" },
          @{ name = "macos-x64"; archive = "zip" },
          @{ name = "macos-arm64"; archive = "zip" }
        )
        
        foreach ($platform in $platforms) {
          $artifactName = "mcp-proxy-tool-$($platform.name)"
          $artifactPath = "artifacts/$artifactName/$artifactName"
          
          if (Test-Path $artifactPath) {
            Write-Host "Processing $($platform.name)..."
            
            # Create staging directory
            $stagingDir = "staging/$($platform.name)"
            New-Item -ItemType Directory -Path $stagingDir -Force | Out-Null
            
            # Copy binary (add .exe for Windows)
            $binaryName = "mcp-proxy-tool"
            if ($platform.name -like "*windows*") {
              $binaryName += ".exe"
            }
            Copy-Item $artifactPath "$stagingDir/$binaryName"
            
            # Copy additional files
            if (Test-Path "README.md") { Copy-Item "README.md" "$stagingDir/" }
            if (Test-Path "LICENSE") { Copy-Item "LICENSE*" "$stagingDir/" }
            
            # Create archive
            $archiveName = "mcp-proxy-tool-$($platform.name)"
            if ($IsWindows) {
              7z a "release/$archiveName.zip" "$stagingDir/*"
            } else {
              Push-Location $stagingDir
              zip -r "../../release/$archiveName.zip" *
              Pop-Location
            }
            
            Write-Host "✓ Created release/$archiveName.zip"
          } else {
            Write-Host "⚠ Artifact not found: $artifactPath"
          }
        }

    - name: Generate checksums
      shell: pwsh
      run: |
        Push-Location release
        Get-ChildItem -Include "*.zip" | ForEach-Object {
          $hash = Get-FileHash $_.FullName -Algorithm SHA256
          "$($hash.Hash.ToLower())  $($_.Name)"
        } | Out-File -FilePath "../checksums.txt" -Encoding UTF8
        Pop-Location

    - name: Create Release
      shell: pwsh
      run: |
        # Prepare release assets
        $assets = Get-ChildItem release -Include "*.zip" | ForEach-Object { $_.FullName }
        $assets += "checksums.txt"
        
        # Create release body
        $body = "## MCP Proxy Tool ${{ steps.tag.outputs.tag }}`n`n" +
                "Cross-platform MCP (Model Context Protocol) proxy tool that forwards requests to HTTP, STDIO, or named pipe-based MCP servers.`n`n" +
                "### Installation`n`n" +
                "Download the appropriate binary for your platform below.`n`n" +
                "### Supported Platforms`n`n" +
                "- **Windows**: x86_64, ARM64`n" +
                "- **macOS**: Intel (x86_64), Apple Silicon (ARM64)`n" +
                "- **Linux**: x86_64, ARM64`n`n" +
                "### Usage`n`n" +
                "``````bash`n" +
                "# HTTP proxy`n" +
                "mcp-proxy-tool -u https://example.com/mcp`n`n" +
                "# STDIO proxy`n" +
                "mcp-proxy-tool -c python -a `"mcp_server.py`"`n`n" +
                "# Named pipe proxy (Windows)`n" +
                "mcp-proxy-tool -p `"mcp-server-pipe`"`n`n" +
                "# Named pipe proxy (Unix)`n" +
                "mcp-proxy-tool -p `"/tmp/mcp-server.sock`"`n" +
                "``````n`n" +
                "### Checksums`n`n" +
                "See ``checksums.txt`` for SHA256 verification.`n"
        
        # Create the release
        $bodyFile = "release-body.md"
        $body | Out-File -FilePath $bodyFile -Encoding UTF8
        
        $assetArgs = $assets | ForEach-Object { "--attach", $_ }
        
        gh release create "${{ steps.tag.outputs.tag }}" @assetArgs `
          --title "Release ${{ steps.tag.outputs.tag }}" `
          --notes-file $bodyFile
        
        Write-Host "✓ Release created successfully!"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
