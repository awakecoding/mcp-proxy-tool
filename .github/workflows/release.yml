name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (default: vYYYY.M.D for today)'
        required: false
        type: string
      dry-run:
        description: 'Dry run (do not create GitHub release, just print what would be released)'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release Binaries
    uses: ./.github/workflows/ci.yml
    with:
      release_mode: true

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Get tag
      id: tag
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $inputTag = "${{ github.event.inputs.tag }}"
          if ([string]::IsNullOrWhiteSpace($inputTag)) {
            $now = Get-Date
            $version = $now.ToString('yyyy.M.d')
            $tag = "v$version"
          } else {
            $tag = $inputTag
          }
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } else {
          $tag = "${{ github.ref }}" -replace "refs/tags/", ""
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }


    - name: Create release archives
      shell: pwsh
      run: |
    - name: Create release archives
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path "release" -Force | Out-Null
        # Process each platform's artifacts
        $platforms = @(
          @{ name = "linux-x64"; archive = "zip" },
          @{ name = "linux-arm64"; archive = "zip" },
          @{ name = "windows-x64"; archive = "zip" },
          @{ name = "windows-arm64"; archive = "zip" },
          @{ name = "macos-x64"; archive = "zip" },
          @{ name = "macos-arm64"; archive = "zip" }
        )
        foreach ($platform in $platforms) {
          $IsPlatformWindows = $platform.name -like "*windows*"
          $artifactName = "mcp-proxy-tool-$($platform.name)"
          $artifactPath = if ($IsPlatformWindows) {
            "artifacts/$artifactName/mcp-proxy-tool.exe"
          } else {
            "artifacts/$artifactName/mcp-proxy-tool"
          }
          if (Test-Path $artifactPath) {
            Write-Host "Processing $($platform.name)..."
            # Create staging directory
            $stagingDir = "staging/$($platform.name)"
            New-Item -ItemType Directory -Path $stagingDir -Force | Out-Null
            # Always copy as 'mcp-proxy-tool' (with .exe for Windows)
            $binaryName = if ($IsPlatformWindows) { "mcp-proxy-tool.exe" } else { "mcp-proxy-tool" }
            # Remove any existing file with the target name
            if (Test-Path "$stagingDir/$binaryName") { Remove-Item "$stagingDir/$binaryName" -Force }
            Copy-Item $artifactPath "$stagingDir/$binaryName"
            $archiveName = "mcp-proxy-tool-$($platform.name)"
            if ($IsPlatformWindows) {
              7z a "release/$archiveName.zip" "$stagingDir/*"
            } else {
              Push-Location $stagingDir
              zip -r "../../release/$archiveName.zip" *
              Pop-Location
            }
            Write-Host "✓ Created release/$archiveName.zip (contains $binaryName)"
          } else {
            Write-Host "⚠ Artifact not found: $artifactPath"
          }
        }

    - name: Upload release zips as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-zips
        path: release/*.zip
        retention-days: 7


    - name: Generate checksums
      shell: pwsh
      run: |
        Push-Location release
        Get-ChildItem -Include "*.zip" | ForEach-Object {
          $hash = Get-FileHash $_.FullName -Algorithm SHA256
          "$($hash.Hash.ToLower())  $($_.Name)"
        } | Out-File -FilePath "../checksums.txt" -Encoding UTF8
        Pop-Location

    - name: List release artifacts and print checksums.txt
      shell: pwsh
      run: |
        Write-Host "Release ZIPs to be checksummed:"
        Get-ChildItem release -Include "*.zip" | ForEach-Object { Write-Host $_.FullName }
        Write-Host "\nContents of checksums.txt:"
        if (Test-Path "checksums.txt") {
          $content = Get-Content "checksums.txt"
          if ($content) {
            $content | Write-Host
          } else {
            Write-Host "checksums.txt is empty!"
          }
        } else {
          Write-Host "checksums.txt does not exist!"
        }

    - name: Create Release (or Dry Run)
      shell: pwsh
      run: |
        # Prepare release assets
        $assets = Get-ChildItem release -Include "*.zip" | ForEach-Object { $_.FullName }
        $assets += "checksums.txt"
        
        # Create release body
        $body = "## MCP Proxy Tool ${{ steps.tag.outputs.tag }}`n`n" +
                "Cross-platform MCP (Model Context Protocol) proxy tool that forwards requests to HTTP, STDIO, or named pipe-based MCP servers.`n`n" +
                "### Installation`n`n" +
                "Download the appropriate binary for your platform below.`n`n" +
                "### Supported Platforms`n`n" +
                "- **Windows**: x86_64, ARM64`n" +
                "- **macOS**: Intel (x86_64), Apple Silicon (ARM64)`n" +
                "- **Linux**: x86_64, ARM64`n`n" +
                "### Usage`n`n" +
                "``````bash`n" +
                "# HTTP proxy`n" +
                "mcp-proxy-tool -u https://example.com/mcp`n`n" +
                "# STDIO proxy`n" +
                "mcp-proxy-tool -c python -a `"mcp_server.py`"`n`n" +
                "# Named pipe proxy (Windows)`n" +
                "mcp-proxy-tool -p `"mcp-server-pipe`"`n`n" +
                "# Named pipe proxy (Unix)`n" +
                "mcp-proxy-tool -p `"/tmp/mcp-server.sock`"`n" +
                "``````n`n" +
                "### Checksums`n`n" +
                "See ``checksums.txt`` for SHA256 verification.`n"
        
        # Create the release body file
        $bodyFile = "release-body.md"
        $body | Out-File -FilePath $bodyFile -Encoding UTF8
        
        # Pass assets as positional arguments (not --attach)
        if ("${{ github.event.inputs.dry-run }}" -eq "true") {
          Write-Host "[DRY RUN] Would create release with tag: ${{ steps.tag.outputs.tag }}"
          Write-Host "[DRY RUN] Assets: $assets"
          Write-Host "[DRY RUN] Release notes:"
          Get-Content $bodyFile | Write-Host
        } else {
          gh release create "${{ steps.tag.outputs.tag }}" $assets `
            --title "Release ${{ steps.tag.outputs.tag }}" `
            --notes-file $bodyFile
          Write-Host "✓ Release created successfully!"
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
