name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  workflow_call:
    inputs:
      release_mode:
        description: 'Build in release mode'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x64
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            arch: x64
          # Linux ARM64 (cross-compiled)
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            arch: arm64
          # Windows x64
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            arch: x64
          # Windows ARM64 (cross-compiled)
          - os: windows-2022
            target: aarch64-pc-windows-msvc
            arch: arm64
          # macOS Intel (via emulation on ARM64)
          - os: macos-15
            target: x86_64-apple-darwin
            arch: x64
          # macOS ARM64
          - os: macos-15
            target: aarch64-apple-darwin
            arch: arm64

    steps:
    - name: preflight
      id: preflight
      shell: bash
      run: |
        if [[ -n "${{ github.event.inputs.version }}" ]]; then
          echo "MCP_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "MCP_VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        fi
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust target
      shell: pwsh
      run: |
        Write-Host "Installing Rust target: ${{ matrix.target }}"
        rustup target add ${{ matrix.target }}
        rustup show

    - name: Configure build environment
      shell: pwsh
      run: |
        # Configure environment variables for all platforms
        if ($IsLinux) {
          # Linux-specific configuration
          Write-Host "Configuring Linux environment"
          if ("${{ matrix.target }}" -eq "aarch64-unknown-linux-gnu") {
            # Install cross-compilation toolchain for ARM64
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $env:GITHUB_ENV
          }
        } elseif ($IsMacOS) {
          # macOS-specific configuration
          Write-Host "Configuring macOS environment"
          $env:MACOSX_DEPLOYMENT_TARGET="10.13"
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $env:GITHUB_ENV
        } elseif ($IsWindows) {
          # Windows-specific configuration
          Write-Host "Configuring Windows environment"
        }
        Write-Host "Build environment configured for ${{ matrix.os }}"

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      shell: pwsh
      run: |
        $env:MCP_VERSION = "$env:MCP_VERSION"
        if ("${{ inputs.release_mode }}" -eq "true") {
          if ($IsWindows) {
            $env:MCP_VERSION = $env:MCP_VERSION
            cargo build --release --verbose --target ${{ matrix.target }}
          } else {
            cargo build --release --verbose --target ${{ matrix.target }}
          }
        } else {
          if ($IsWindows) {
            $env:MCP_VERSION = $env:MCP_VERSION
            cargo build --verbose --target ${{ matrix.target }}
          } else {
            cargo build --verbose --target ${{ matrix.target }}
          }
        }

    - name: Run tests
      if: matrix.arch != 'arm64' || runner.arch == 'ARM64'
      shell: pwsh
      run: cargo test --verbose --target ${{ matrix.target }}

    - name: Run clippy
      shell: pwsh
      run: cargo clippy --target ${{ matrix.target }} -- -D warnings

    - name: Check formatting
      if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
      shell: pwsh
      run: cargo fmt -- --check

    - name: Verify binary compatibility
      shell: pwsh
      run: |
        $buildMode = if ("${{ inputs.release_mode }}" -eq "true") { "release" } else { "debug" }
        $binaryPath = "target/${{ matrix.target }}/$buildMode/mcp-proxy-tool"
        if ($IsWindows) {
          $binaryPath += ".exe"
        }
        
        Write-Host "Binary info for ${{ matrix.os }}:"
        
        if ($IsLinux) {
          Write-Host "Checking glibc version requirements:"
          $glibcDeps = objdump -T $binaryPath 2>$null | grep GLIBC | sort -u
          if ($glibcDeps) {
            Write-Host $glibcDeps
          } else {
            Write-Host "No glibc dependencies found"
          }
          file $binaryPath
        } elseif ($IsMacOS) {
          Write-Host "Checking macOS deployment target:"
          $versionInfo = otool -l $binaryPath | grep -A 3 LC_VERSION_MIN_MACOSX
          if ($versionInfo) {
            Write-Host $versionInfo
          } else {
            Write-Host "No version info found"
          }
          file $binaryPath
        } elseif ($IsWindows) {
          Write-Host "Windows binary information:"
          if (Test-Path $binaryPath) {
            $fileInfo = Get-Item $binaryPath
            Write-Host "Size: $($fileInfo.Length) bytes"
            Write-Host "Last modified: $($fileInfo.LastWriteTime)"
          } else {
            Write-Host "Binary not found at $binaryPath"
          }
        }
        
        Write-Host "Architecture: ${{ matrix.arch }}"
        Write-Host "Target: ${{ matrix.target }}"

    - name: Prepare artifact
      id: prepare-artifact
      shell: pwsh
      run: |
        $target = "${{ matrix.target }}"
        $buildMode = if ("${{ inputs.release_mode }}" -eq "true") { "release" } else { "debug" }
        $binaryPath = "target/$target/$buildMode/mcp-proxy-tool"
        
        # Add .exe extension for Windows
        if ($target -like "*windows*") {
          $binaryPath += ".exe"
        }
        
        # Create artifacts directory
        New-Item -ItemType Directory -Force -Path "artifacts"
        
        # Determine artifact name based on target
        $artifactName = switch ($target) {
          "x86_64-unknown-linux-gnu" { "mcp-proxy-tool-linux-x64" }
          "aarch64-unknown-linux-gnu" { "mcp-proxy-tool-linux-arm64" }
          "x86_64-pc-windows-msvc" { "mcp-proxy-tool-windows-x64" }
          "aarch64-pc-windows-msvc" { "mcp-proxy-tool-windows-arm64" }
          "x86_64-apple-darwin" { "mcp-proxy-tool-macos-x64" }
          "aarch64-apple-darwin" { "mcp-proxy-tool-macos-arm64" }
          default { "mcp-proxy-tool-$target" }
        }
        
        Write-Host "Copying $binaryPath to artifacts/$artifactName"
        Copy-Item $binaryPath "artifacts/$artifactName"
        
        # Output for next step
        echo "artifact-name=$artifactName" >> $env:GITHUB_OUTPUT

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.prepare-artifact.outputs.artifact-name }}
        path: artifacts/${{ steps.prepare-artifact.outputs.artifact-name }}
        retention-days: 7

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install cargo-audit
      shell: pwsh
      run: cargo install cargo-audit
    
    - name: Run audit
      shell: pwsh
      run: cargo audit
