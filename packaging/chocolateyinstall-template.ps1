# Chocolatey Install Script Template for mcp-proxy-tool
#
# This script downloads and installs the mcp-proxy-tool binary
# Will be generated by Update-Packages.ps1 with actual release URLs and checksums

$ErrorActionPreference = 'Stop'

$packageName = 'mcp-proxy-tool'
$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$packageVersion = '{VERSION}' # Will be replaced by Update-Packages.ps1

# Determine architecture
if ($env:PROCESSOR_ARCHITECTURE -eq 'AMD64' -or $env:PROCESSOR_ARCHITEW6432 -eq 'AMD64') {
    $architecture = 'x64'
    $url = 'https://github.com/awakecoding/mcp-proxy-tool/releases/download/v{VERSION}/mcp-proxy-tool-windows-x64.zip'
    $checksum = '{SHA256_X64}' # Will be replaced by Update-Packages.ps1
} elseif ($env:PROCESSOR_ARCHITECTURE -eq 'ARM64') {
    $architecture = 'arm64'
    $url = 'https://github.com/awakecoding/mcp-proxy-tool/releases/download/v{VERSION}/mcp-proxy-tool-windows-arm64.zip'
    $checksum = '{SHA256_ARM64}' # Will be replaced by Update-Packages.ps1
} else {
    throw "Unsupported architecture: $env:PROCESSOR_ARCHITECTURE"
}

Write-Host "Installing $packageName v$packageVersion for $architecture..." -ForegroundColor Green

$packageArgs = @{
    packageName   = $packageName
    unzipLocation = $toolsDir
    url           = $url
    checksum      = $checksum
    checksumType  = 'sha256'
}

# Download and extract the zip file
Install-ChocolateyZipPackage @packageArgs

# Our release process ensures the binary is at the root of the zip
$exePath = Join-Path $toolsDir 'mcp-proxy-tool.exe'

if (-not (Test-Path $exePath)) {
    throw "Expected executable not found at: $exePath"
}

Write-Host "‚úÖ $packageName installed successfully!" -ForegroundColor Green
Write-Host "üìç Executable location: $exePath" -ForegroundColor Cyan
Write-Host "üîß Usage: mcp-proxy-tool --help" -ForegroundColor Yellow
